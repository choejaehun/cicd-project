pipeline {
    agent any

    tools {
        jdk 'jdk17'
    }

    environment {
        DOCKER_REGISTRY_CREDENTIALS = credentials('docker-hub-credentials')
        AUTHOR_IMAGE = "choijaehun/authors"
        MYSQL_HOST = '172.17.0.3'
        MYSQL_PORT = '3306'
        MYSQL_DATABASE = 'cicd_project'
        TAG_FILE = './cicd-pipeline/author/tag.txt' // 태그 파일 경로
        HELM_VALUES_PATH = '/root/cicd-project/cicd-pipeline/cicd-helm/author-helm/values.yaml'
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'ssh-key', url: 'https://github.com/choejaehun/cicd-project.git', branch: 'main'
            }
        }

        stage('Set Permissions') {
            steps {
                sh 'chmod +x ./cicd-pipeline/author/gradlew'
            }
        }

        stage('Load Tag') {
            steps {
                script {
                    if (fileExists(TAG_FILE)) {
                        // 태그 파일에서 현재 태그 읽기
                        def currentTag = readFile(TAG_FILE).trim()
                        def versionParts = currentTag.split("\\.")
                        def minor = versionParts[1].toInteger() + 1
                        IMAGE_TAG = "${versionParts[0]}.${String.format('%02d', minor)}"
                    } else {
                        // 태그 파일이 없으면 초기값 설정
                        IMAGE_TAG = "1.00"
                    }
                    
                    // 새 태그를 파일에 저장
                    writeFile file: TAG_FILE, text: IMAGE_TAG
                    echo "새로운 태그: ${IMAGE_TAG}"
                }
            }
        }
        stage('Update Helm Values') {
            steps {
                script {
                    // Helm `values.yaml` 파일의 image.tag 필드를 새로운 태그로 업데이트
                    sh """
                    sed -i 's/tag: .*/tag: ${IMAGE_TAG}/' ${HELM_VALUES_PATH}
                    """
                }
            }
        }
        stage('Build Author') {
            steps {
                script {
                    echo "Author 프로젝트 빌드 실행:"
                    sh "./cicd-pipeline/author/gradlew -p ./cicd-pipeline/author clean build -x test -Dspring.datasource.url=jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE} -Dspring.datasource.username=root -Dspring.datasource.password=P@ssw0rd"
                }
            }
        }

        stage('Docker Build and Push Author') {
            steps {
                script {
                    def imageName = "${AUTHOR_IMAGE}:${IMAGE_TAG}"
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        def app = docker.build(imageName, './cicd-pipeline/author')
                        app.push("${IMAGE_TAG}")
                    }
                    sh "docker rmi ${imageName} || true" // 푸시 후 로컬에서 이미지 삭제
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
